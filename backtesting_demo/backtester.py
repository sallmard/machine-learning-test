from typing import List


class Backtester:
    """Simple backtest engine operating on plain Python data."""

    def __init__(self, data: dict, signals: List[int], initial_cash: float = 10000.0):
        """Create a new backtester.

        Parameters
        ----------
        data : dict
            Dictionary containing OHLCV lists with a ``"Close"`` key.
        signals : List[int]
            Trading signals generated by a strategy.
        initial_cash : float
            Starting cash amount.
        """
        self.data = data
        self.signals = signals
        self.initial_cash = initial_cash
        self.positions = [0] * len(self.data["Close"])
        self.cash = initial_cash
        self.position = 0
        self.trades = []

    def run(self):
        for i in range(1, len(self.data["Close"])):
            signal = self.signals[i]
            price = self.data["Close"][i]
            if signal == 1 and self.position <= 0:
                # buy
                qty = int(self.cash // price)
                if qty > 0:
                    self.cash -= qty * price
                    self.position += qty
                    self.trades.append({"type": "BUY", "price": price, "qty": qty, "index": i})
            elif signal == -1 and self.position > 0:
                # sell
                self.cash += self.position * price
                self.trades.append({"type": "SELL", "price": price, "qty": self.position, "index": i})
                self.position = 0
            self.positions[i] = self.position

    @property
    def portfolio_value(self):
        last_price = self.data["Close"][-1]
        return self.cash + self.position * last_price
